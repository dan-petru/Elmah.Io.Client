// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Elmah.Io.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Heartbeats.
    /// </summary>
    public static partial class HeartbeatsExtensions
    {
            /// <summary>
            /// Create a new heartbeat.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The ID of the heartbeat check.
            /// </param>
            /// <param name='logId'>
            /// The ID of the log containing the heartbeat check.
            /// </param>
            /// <param name='heartbeat'>
            /// The details of the heartbeat.
            /// </param>
            public static void Create(this IHeartbeats operations, string id, string logId, CreateHeartbeat heartbeat = default(CreateHeartbeat))
            {
                operations.CreateAsync(id, logId, heartbeat).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new heartbeat.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The ID of the heartbeat check.
            /// </param>
            /// <param name='logId'>
            /// The ID of the log containing the heartbeat check.
            /// </param>
            /// <param name='heartbeat'>
            /// The details of the heartbeat.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IHeartbeats operations, string id, string logId, CreateHeartbeat heartbeat = default(CreateHeartbeat), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateWithHttpMessagesAsync(id, logId, heartbeat, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
