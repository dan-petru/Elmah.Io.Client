// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Elmah.Io.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CreateDeployment
    {
        /// <summary>
        /// Initializes a new instance of the CreateDeployment class.
        /// </summary>
        public CreateDeployment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateDeployment class.
        /// </summary>
        /// <param name="version">The version number of this deployment. The
        /// value of version can be a SemVer compliant string or any other
        /// syntax that you are using as your version numbering scheme.</param>
        /// <param name="created">When was this deployment created in UTC.
        /// Defaults to current time if not specified.</param>
        /// <param name="description">Optional description of this deployment.
        /// Can be markdown or clear text.</param>
        /// <param name="userName">The name of the person responsible for
        /// creating this deployment. This can be the name taken from
        /// your deployment server (like VSTS or Octopus).</param>
        /// <param name="userEmail">The email of the person responsible for
        /// creating this deployment. This can be the email taken from
        /// your deployment server (like VSTS or Octopus).</param>
        /// <param name="logId">As default, deployments are attached all logs
        /// of the organization. If you want a deployment to
        /// attach to a single log only, set this to the ID of that
        /// log.</param>
        public CreateDeployment(string version, System.DateTime? created = default(System.DateTime?), string description = default(string), string userName = default(string), string userEmail = default(string), string logId = default(string))
        {
            Version = version;
            Created = created;
            Description = description;
            UserName = userName;
            UserEmail = userEmail;
            LogId = logId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the version number of this deployment. The value of
        /// version can be a SemVer compliant string or any other
        /// syntax that you are using as your version numbering scheme.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets when was this deployment created in UTC. Defaults to
        /// current time if not specified.
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// Gets or sets optional description of this deployment. Can be
        /// markdown or clear text.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the name of the person responsible for creating this
        /// deployment. This can be the name taken from
        /// your deployment server (like VSTS or Octopus).
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets the email of the person responsible for creating this
        /// deployment. This can be the email taken from
        /// your deployment server (like VSTS or Octopus).
        /// </summary>
        [JsonProperty(PropertyName = "userEmail")]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or sets as default, deployments are attached all logs of the
        /// organization. If you want a deployment to
        /// attach to a single log only, set this to the ID of that log.
        /// </summary>
        [JsonProperty(PropertyName = "logId")]
        public string LogId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
        }
    }
}
